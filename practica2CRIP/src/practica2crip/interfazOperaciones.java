
package practica2crip;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author javier
 */
public class interfazOperaciones extends javax.swing.JFrame {

    /**
     * Creates new form interfazOperaciones
     */
    public interfazOperaciones() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        suc1MetodoXOR = new javax.swing.JTextField();
        suc1MetodoAND = new javax.swing.JTextField();
        LFSR = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        mezclaXOR = new javax.swing.JCheckBox();
        mezclaAND = new javax.swing.JCheckBox();
        berlekampMassey = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sucMetodoLFSR = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        isPeriodic = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sucMetodoIsPeriodic = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        sucMetodoBerlMass = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        polMetodoLFSR = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        pantallaMostrarResultados = new javax.swing.JTextField();
        limpiarPantalla = new javax.swing.JButton();
        mostrarEnPantalla = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        suc2MetodoAND = new javax.swing.JTextField();
        suc2MetodoXOR = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        tamSalidaLFSR = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel11.setText("Sucesión 1");

        LFSR.setText("LFSR");

        jLabel1.setText("Parámetros:");

        mezclaXOR.setText("Mezcla XOR");

        mezclaAND.setText("Mezcla AND");

        berlekampMassey.setText("Berlekamp Massey");

        jLabel3.setText("Parámetros:");

        jLabel2.setText("Parámetros:");

        jLabel7.setText("Sucesión");

        jLabel8.setText("Semilla");

        isPeriodic.setText("Saber si una sucesión es periódica");

        jLabel6.setText("Sucesión");

        jLabel5.setText("Parámetros:");

        jLabel10.setText("Sucesión 1");

        jLabel4.setText("Parámetros:");

        jLabel14.setText("c(D) = D¹   D²   D³  D⁴   D⁵  D⁶   D⁷   D⁸   D⁹   D¹⁰");

        jLabel9.setText("Polinomio");

        jLabel15.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(112, 25, 25));
        jLabel15.setText("Resultados");

        pantallaMostrarResultados.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        pantallaMostrarResultados.setForeground(java.awt.SystemColor.activeCaption);

        limpiarPantalla.setText("Limpiar");
        limpiarPantalla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarPantallaActionPerformed(evt);
            }
        });

        mostrarEnPantalla.setText("Mostrar");
        mostrarEnPantalla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarEnPantallaActionPerformed(evt);
            }
        });

        jLabel12.setText("Sucesión 2");

        jLabel13.setText("Sucesión 2");

        jLabel16.setText("Tamaño salida");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1084, 1084, 1084))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pantallaMostrarResultados)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mostrarEnPantalla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(limpiarPantalla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(mezclaAND)
                                            .addComponent(mezclaXOR, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(berlekampMassey)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(LFSR)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(116, 116, 116)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(isPeriodic)
                                            .addComponent(tamSalidaLFSR, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(suc1MetodoXOR))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sucMetodoLFSR)
                                            .addComponent(sucMetodoBerlMass)
                                            .addComponent(suc1MetodoAND)
                                            .addComponent(sucMetodoIsPeriodic, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(suc2MetodoXOR, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addGap(18, 18, 18)
                                                .addComponent(polMetodoLFSR, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(suc2MetodoAND, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(41, 41, 41))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(86, 86, 86)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(sucMetodoIsPeriodic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(isPeriodic)
                            .addComponent(jLabel7))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel8))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(LFSR)
                                                .addComponent(jLabel16)
                                                .addComponent(tamSalidaLFSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(25, 25, 25)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(berlekampMassey)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel6)
                                            .addComponent(sucMetodoBerlMass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(sucMetodoLFSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel10)
                                .addComponent(suc1MetodoAND, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mezclaAND)
                                .addComponent(jLabel12)
                                .addComponent(suc2MetodoAND, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(polMetodoLFSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(100, 100, 100)))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mezclaXOR)
                    .addComponent(jLabel5)
                    .addComponent(jLabel11)
                    .addComponent(suc1MetodoXOR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(suc2MetodoXOR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mostrarEnPantalla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(limpiarPantalla))
                    .addComponent(pantallaMostrarResultados))
                .addGap(87, 87, 87))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limpiarPantallaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarPantallaActionPerformed
        new interfazOperaciones().setVisible(true);
    }//GEN-LAST:event_limpiarPantallaActionPerformed

    
    
    private void mostrarEnPantallaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarEnPantallaActionPerformed
        int lon = 0;
        String suc1 = null;
        StringBuffer suc2 = null;
        BufferedReader buffIn;
        List<String> listSuc = new ArrayList<String>();
        
        //Llamada al metodo public static int is_periodic(String s)
        if(isPeriodic.isSelected()){
            if (!sucMetodoIsPeriodic.getText().isEmpty() )
                suc1=sucMetodoIsPeriodic.getText();//Se lee la sucesion desde pantalla
            else
                try {
                    buffIn=Practica2CRIP.reader();//Se lee la sucesion desde fichero UNA SOLA LINEA
                    suc1 = buffIn.readLine();
                    buffIn.close();
                } catch (IOException ex) {
                  Logger.getLogger(interfazOperaciones.class.getName()).log(Level.SEVERE, null, ex);}
            
            if(suc1.isEmpty())
                pantallaMostrarResultados.setText("El fichero de texto esta vacio");
            else{
                if(Practica2CRIP.is_periodic(suc1)==-1)
                    pantallaMostrarResultados.setText("La sucesión no es periódica");
                else
                    pantallaMostrarResultados.setText("La sucesión tiene periodo "+Practica2CRIP.is_periodic(suc1));
            }
        }
        
        //Llamada al metodo public static void LFSR(StringBuffer semSuc, char [] polConex, int tamSuc) 
        else if(LFSR.isSelected()){
            if (sucMetodoLFSR.getText().isEmpty()  || polMetodoLFSR.getText().isEmpty())
                pantallaMostrarResultados.setText("Introduzca la semilla y el polinomio del LFSR");
            else{
                
                if(tamSalidaLFSR.getText().isEmpty())//No se especifica tamaño de salida en la interfaz
                    suc1 = Practica2CRIP.LFSR(sucMetodoLFSR.getText(), polMetodoLFSR.getText(), ((Practica2CRIP.pow(2, sucMetodoLFSR.getText().length()))-1)*2);
                else//Se especifica tamaño de salida en la interfaz
                    suc1 = Practica2CRIP.LFSR(sucMetodoLFSR.getText(), polMetodoLFSR.getText(), Integer.parseInt (tamSalidaLFSR.getText()));
                
                if(Practica2CRIP.is_periodic(suc1)==-1)
                    pantallaMostrarResultados.setText("La sucesión no es periódica");
                else
                    pantallaMostrarResultados.setText("La sucesión tiene periodo "+Practica2CRIP.is_periodic(suc1));
                
                try {
                    Practica2CRIP.writer(suc1); //Mostrar la sucesion pseudo-aleatoria en un fichero
                } catch (IOException ex) {Logger.getLogger(interfazOperaciones.class.getName()).log(Level.SEVERE, null, ex);}
            }
        }
        
        //Llamada al metodo public static int berlekamp_massey(int[] suc, int[] polCo) 
        else if(berlekampMassey.isSelected()){
            if (!sucMetodoBerlMass.getText().isEmpty() )
                suc1=sucMetodoBerlMass.getText();//Se lee la sucesion desde pantalla
            else
                try {
                    buffIn=Practica2CRIP.reader();//Se lee la sucesion desde fichero UNA SOLA LINEA
                    suc1 = buffIn.readLine();
                    buffIn.close();
                } catch (IOException ex) {
                  Logger.getLogger(interfazOperaciones.class.getName()).log(Level.SEVERE, null, ex);
            }
            int[] sucArray = new int[suc1.length()];
            for (int i = 0; i < suc1.length(); i++){
                if (suc1.charAt(i)=='1') 
                    sucArray[i]=1;
                else 
                    sucArray[i]=0;
            } 
            suc1  = Practica2CRIP.berlekamp_massey(sucArray);
            pantallaMostrarResultados.setText(suc1); 
        }
        
        //Llamada al metodo public static StringBuffer mixing_function_AND(List<StringBuffer> listSuc)
        else if(mezclaAND.isSelected()){
            if(suc1MetodoAND.getText().length()!= suc2MetodoAND.getText().length())
                pantallaMostrarResultados.setText("Las dos sucesiones deben tener el mismo tamaño");
            else{
                if (suc1MetodoAND.getText().isEmpty() || suc2MetodoAND.getText().isEmpty()){//Se leen las n sucesiones desde un fichero
                    try {
                        buffIn=Practica2CRIP.reader(); //Se leen las n sucesiones desde un fichero VARIAS LINEAS
                        while((suc1 = buffIn.readLine()) != null)
                            listSuc.add(suc1);
                        buffIn.close();
                    } catch (IOException ex) {Logger.getLogger(interfazOperaciones.class.getName()).log(Level.SEVERE, null, ex);}
                }  
                else{//Se leen las 2 sucesiones desde pantalla
                    listSuc.add(suc1MetodoAND.getText());
                    listSuc.add(suc2MetodoAND.getText());
                }
                suc1=Practica2CRIP.mixing_function_AND(listSuc);
                pantallaMostrarResultados.setText("La nueva sucesion despues de la operación AND es \n"+suc1);
            }
        }
        
        //Llamada al metodo public static StringBuffer mixing_function_XOR(List<StringBuffer> listSuc)
        else if(mezclaXOR.isSelected()){
            if(suc1MetodoXOR.getText().length()!= suc2MetodoXOR.getText().length())
                pantallaMostrarResultados.setText("Las dos sucesiones deben tener el mismo tamaño");
            else{
                if (suc1MetodoXOR.getText().isEmpty() || suc2MetodoXOR.getText().isEmpty() ){
                    try {
                        buffIn=Practica2CRIP.reader(); //Se leen las n sucesiones desde un fichero VARIAS LINEAS
                        while((suc1 = buffIn.readLine()) != null)
                            listSuc.add(suc1);
                         buffIn.close();
                    } catch (IOException ex) {Logger.getLogger(interfazOperaciones.class.getName()).log(Level.SEVERE, null, ex);}
                }
                else{//Se leen las 2 sucesiones desde pantalla
                    listSuc.add(suc1MetodoXOR.getText());
                    listSuc.add(suc2MetodoXOR.getText());
                }
                suc1=Practica2CRIP.mixing_function_XOR(listSuc);
                pantallaMostrarResultados.setText("La nueva sucesion despues de la operación XOR es \n"+suc1);
            }
        }
        else
            pantallaMostrarResultados.setText("Seleccione una de las operaciones");
    }//GEN-LAST:event_mostrarEnPantallaActionPerformed

    /** 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfazOperaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfazOperaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfazOperaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfazOperaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfazOperaciones().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox LFSR;
    private javax.swing.JCheckBox berlekampMassey;
    private javax.swing.JCheckBox isPeriodic;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton limpiarPantalla;
    private javax.swing.JCheckBox mezclaAND;
    private javax.swing.JCheckBox mezclaXOR;
    private javax.swing.JButton mostrarEnPantalla;
    private javax.swing.JTextField pantallaMostrarResultados;
    private javax.swing.JTextField polMetodoLFSR;
    private javax.swing.JTextField suc1MetodoAND;
    private javax.swing.JTextField suc1MetodoXOR;
    private javax.swing.JTextField suc2MetodoAND;
    private javax.swing.JTextField suc2MetodoXOR;
    private javax.swing.JTextField sucMetodoBerlMass;
    private javax.swing.JTextField sucMetodoIsPeriodic;
    private javax.swing.JTextField sucMetodoLFSR;
    private javax.swing.JTextField tamSalidaLFSR;
    // End of variables declaration//GEN-END:variables
}
